{"api":{"version":2,"latestVersion":2},"lesson":{"id":"algorithmique","level":"terminale","title":"Chapitre XII – Algorithmique","chapter":12,"specialty":false,"content":"/api/v2/terminale/algorithmique/","comments":"/api/v2/terminale/algorithmique/comments/","summary":"/api/v2/terminale/algorithmique/summary/"},"html":"<h2 id=\"définition\">Définition</h2>\n<p><strong>Un algorithme</strong> est une suite finie et ordonnée d’opérations ou d'instructions permettant de résoudre un problème ou\nd'obtenir un résultat. Ainsi, faire une recette de cuisine ou encore effectuer une division euclidienne à la main sont\ndes exemples d'algorithmes.</p>\n<p>Dans ce cours, nous travaillerons à la fois avec des algorithmes <a href=\"https://python.org\">Python</a> et des algorithmes en\npseudo-code.</p>\n<h2 id=\"instructions\">Instructions</h2>\n<h3 id=\"création-de-variables\">Création de variables</h3>\n<p><strong>Créer une variable</strong> permet de réserver un espace pour y stocker des données quelconques.</p>\n<p>On donne un nom à chaque espace pour le repérer : ce sont les noms de variables.</p>\n<p>Dans certains langages, on leur donne également un type (entier, réel, ...) pour travailler avec (ce qui n'est pas le\ncas dans Python).</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">nombre = 0 # On crée la variable \"nombre\" et on lui assigne la valeur 0. chaine = 'Bonjour' # On crée la variable \"chaine\" et on lui assigne la valeur 'Bonjour'.\n</code></pre>\n</div>\n<h3 id=\"affections-de-valeurs\">Affections de valeurs</h3>\n<p>Comme dit précédemment, les variables sont des espaces dans lequel il est possible de stocker des informations.</p>\n<p>Cependant, après avoir créé cet espace, celui-ci est encore vide. C'est pourquoi on doit le remplir : c'est\n<strong>l'affectation d'une valeur à une variable</strong>.</p>\n<p>Il existe plusieurs manières d'affecter une valeur à une variable : soit on lui donne directement sa valeur dans\nl'algorithme, soit on demande à l'utilisateur d'entrer une valeur (il faut garder à l'esprit que nos algorithmes sont\nfaits pour être utilisés par des utilisateurs).</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">x = int(input('Veuillez entrer une valeur : ')) # L'utilisateur va entrer une valeur, on va la convertir en entier et on va affecter celui-ci à notre variable \"x\".\ny = 2*x + 10 # Une fois fait, \"y\" va prendre la valeur 2 * x + 10. Par exemple, si l'utilisateur entre \"10\", \"y\" vaudra 30.\n</code></pre>\n</div>\n<p>Une fois que l'on a affecté une valeur à une variable, il est encore possible de la changer !</p>\n<p>Les <strong>listes</strong> sont des types de variables particuliers. Ce sont en effet, des variables qui contiennent des variables.</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">fruits = ['pomme', 'banane', 'poire']\nfruits.append('cerise') # On peut ajouter un objet à notre liste.\ndel fruits[0] # On peut également supprimer un objet de la liste en fonction de son index (ici, on supprime le premier).\nfruits.remove('pomme') # Mais on peut aussi en supprimer un avec sa valeur. # Beaucoup d'autres opérations sur les listes sont disponibles (longueur, renversement, ...). N'hésitez pas à vous renseigner !\n</code></pre>\n</div>\n<h3 id=\"affichage-de-variables\">Affichage de variables</h3>\n<p>Nos algorithmes étant faits pour être utilisés, il faut donc <strong>retourner un résultat</strong> sinon ceux-ci seraient inutiles.</p>\n<p>C'est pourquoi, on peut afficher les valeurs des variables (les montrer à l'utilisateur).</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">print('Voici la valeur de \"maVariable\" :', maVariable) # Permet d'afficher la valeur de \"maVariable\".\n</code></pre>\n</div>\n<h2 id=\"blocs-dinstructions\">Blocs d'instructions</h2>\n<h3 id=\"définition-1\">Définition</h3>\n<p>Les blocs d'instructions sont des parties de l'algorithme (ce sont des algorithmes dans l'algorithme) qui s'exécutent\nsuivant certaines conditions propres aux différents blocs d'instructions.</p>\n<h3 id=\"les-blocs-si-et-sinon\">Les blocs SI et SINON</h3>\n<p>Les blocs <strong>SI</strong> et <strong>SINON</strong> sont des blocs d'instructions très utilisés qui permettent de tester une condition : si\nelle est réalisée, on va exécuter les instructions se situant sous le bloc SI et sinon, on va exécuter celles se situant\nsous le bloc SINON.</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">x = 2 # On attribue à \"x\" la valeur 2.\nif x == 3: # Si \"x\" est égal à 3...\n    print('\"x\" est égal à 3.') # ... Alors on affiche ce message. Mais ici, \"x\" vaut 2 donc ce message ne sera jamais affiché.\nelse: # Sinon...\n    print('\"x\" n\\'est pas égal à 3.') # ... On affiche ce message.\n</code></pre>\n</div>\n<h3 id=\"la-boucle-pour\">La boucle POUR</h3>\n<p>La <strong>boucle POUR</strong> est un bloc d'instruction qui s'exécute et qui va faire prendre à une variable toutes les valeurs\ncomprises dans un ensemble d'entiers.</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">for i in range(-5, 6): # Pour chaque entier entre -5 (inclus) et 6 (exclu)...\n    print(i) # ... On affiche cet entier.\n</code></pre>\n</div>\n<h3 id=\"la-boucle-tant-que\">La boucle TANT QUE</h3>\n<p>Cette boucle, différente de la boucle POUR, permet d'exécuter son bloc d'instructions tant qu'une certaine condition est\nvalable.</p>\n<div class=\"formula\" >\n<h4>En python</h4>\n<pre><code class=\"language-python\">x = 100 # On affecte à \"x\" la valeur 100.\nwhile x > 10: # Tant que x est supérieur à 10...\n    x = x / 2 # On divise x par 2 (i.e. on affecte à \"x\" la valeur x/2).\n    print(x) # On affiche la valeur de \"x\".\n</code></pre>\n</div>\n"}